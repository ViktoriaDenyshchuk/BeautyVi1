// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeautyVi.Core.Migrations
{
    [DbContext(typeof(BeautyViContext))]
    partial class BeautyViContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeautyVi.Core.Entities.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Консерванти (Парабени)"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ланолін"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Альфа-гідроксикислоти (AHAs)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Лаванда"
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NameCategory")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameCategory = "Волосся"
                        },
                        new
                        {
                            Id = 2,
                            NameCategory = "Шкіра"
                        },
                        new
                        {
                            Id = 3,
                            NameCategory = "Лице"
                        },
                        new
                        {
                            Id = 4,
                            NameCategory = "Тіло"
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.EffectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameEffectType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EffectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameEffectType = "Зволоження"
                        },
                        new
                        {
                            Id = 2,
                            NameEffectType = "Живлення"
                        },
                        new
                        {
                            Id = 3,
                            NameEffectType = "Проти старіння"
                        },
                        new
                        {
                            Id = 4,
                            NameEffectType = "Очищення"
                        },
                        new
                        {
                            Id = 5,
                            NameEffectType = "Відновлення"
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsHarmful")
                        .HasColumnType("boolean");

                    b.Property<int>("LevelOfDanger")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Активні інгредієнти",
                            Description = "Вітамін C допомагає зволожувати шкіру та підвищує її еластичність.",
                            IsHarmful = false,
                            LevelOfDanger = 1,
                            Name = "Вітамін C"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Активні інгредієнти",
                            Description = "Саліцилова кислота допомагає в боротьбі з акне.",
                            IsHarmful = false,
                            LevelOfDanger = 2,
                            Name = "Саліцилова кислота"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Консерванти",
                            Description = "Парабени використовуються для продовження терміну зберігання, але можуть викликати алергії.",
                            IsHarmful = true,
                            LevelOfDanger = 4,
                            Name = "Парабени"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Активні інгредієнти",
                            Description = "Ментол заспокоює шкіру та дає охолоджуючий ефект.",
                            IsHarmful = false,
                            LevelOfDanger = 1,
                            Name = "Ментол"
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDate = new DateTime(2024, 12, 14, 3, 29, 51, 703, DateTimeKind.Utc).AddTicks(1920),
                            ShippingAddress = "123 Main St",
                            Status = "Completed",
                            TotalAmount = 50.00m,
                            UserId = "b2bac63f-37e3-40ba-9ea9-f830589cb1be"
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverPath")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EffectTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("SuitableForId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EffectTypeId");

                    b.HasIndex("SuitableForId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CoverPath = "\\img\\product\\no_cover.jpg",
                            Description = "Крем для інтенсивного зволоження шкіри.",
                            EffectTypeId = 1,
                            Name = "Зволожуючий крем",
                            Price = 499.99m,
                            SuitableForId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CoverPath = "\\img\\product\\no_cover.jpg",
                            Description = "Відновлюючий шампунь для сухого та пошкодженого волосся.",
                            EffectTypeId = 2,
                            Name = "Шампунь для сухого волосся",
                            Price = 299.99m,
                            SuitableForId = 2
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.ProductAllergen", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("AllergenId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "AllergenId");

                    b.HasIndex("AllergenId");

                    b.ToTable("ProductAllergens");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AllergenId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            AllergenId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            AllergenId = 3
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredients");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 4
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.ProductRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductRecommendations");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.SuitableFor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameSuitableFor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SuitableForOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameSuitableFor = "Суха шкіра"
                        },
                        new
                        {
                            Id = 2,
                            NameSuitableFor = "Жирна шкіра"
                        },
                        new
                        {
                            Id = 3,
                            NameSuitableFor = "Чутлива шкіра"
                        },
                        new
                        {
                            Id = 4,
                            NameSuitableFor = "Нормальне волосся"
                        },
                        new
                        {
                            Id = 5,
                            NameSuitableFor = "Пошкоджене волосся"
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AvoidAllergens")
                        .HasColumnType("boolean");

                    b.Property<string>("AvoidedAllergens")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HairType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkinType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f7438b56-53c8-419b-b6eb-6c34f574fecf",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "3a9a618b-3104-457e-b395-c4def0e4fca1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c90349cb-58a4-4b86-876e-db384e71754c",
                            RoleId = "3a9a618b-3104-457e-b395-c4def0e4fca1"
                        },
                        new
                        {
                            UserId = "b2bac63f-37e3-40ba-9ea9-f830589cb1be",
                            RoleId = "f7438b56-53c8-419b-b6eb-6c34f574fecf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "b2bac63f-37e3-40ba-9ea9-f830589cb1be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e037b91a-18be-451a-a103-1fd122478c5d",
                            Email = "client@beautyvi.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@BEAUTYVI.COM",
                            NormalizedUserName = "CLIENT@BEAUTYVI.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJUrX3Zn7h+yqyoUZsINoE5RzWeOXKoLBnyVcWwGAuq4bGY6vxNFfRCpXOvY0oW7qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8eb28946-3757-4e1f-ae3c-52d5f94396a3",
                            TwoFactorEnabled = false,
                            UserName = "client@beautyvi.com"
                        },
                        new
                        {
                            Id = "c90349cb-58a4-4b86-876e-db384e71754c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0777db6-849e-4ccd-8d86-919db2fce890",
                            Email = "admin@beautyvi.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BEAUTYVI.COM",
                            NormalizedUserName = "ADMIN@BEAUTYVI.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEzkIbTkyS94txr/ONBRbJDXsZdVQWPaSAc163nufXhMEjQjsbB9wfm0wOtVKRO23A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2f0904b-2baa-4cd2-8e7d-50fc5dce2797",
                            TwoFactorEnabled = false,
                            UserName = "admin@beautyvi.com"
                        });
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Order", b =>
                {
                    b.HasOne("BeautyVi.Core.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.OrderItem", b =>
                {
                    b.HasOne("BeautyVi.Core.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyVi.Core.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Product", b =>
                {
                    b.HasOne("BeautyVi.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeautyVi.Core.Entities.EffectType", "EffectType")
                        .WithMany("Products")
                        .HasForeignKey("EffectTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BeautyVi.Core.Entities.SuitableFor", "SuitableFor")
                        .WithMany("Products")
                        .HasForeignKey("SuitableForId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("EffectType");

                    b.Navigation("SuitableFor");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.ProductAllergen", b =>
                {
                    b.HasOne("BeautyVi.Core.Entities.Allergen", "Allergen")
                        .WithMany("ProductAllergens")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyVi.Core.Entities.Product", "Product")
                        .WithMany("ProductAllergens")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.ProductIngredient", b =>
                {
                    b.HasOne("BeautyVi.Core.Entities.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyVi.Core.Entities.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.ProductRecommendation", b =>
                {
                    b.HasOne("BeautyVi.Core.Entities.Product", "Product")
                        .WithMany("ProductRecommendations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyVi.Core.Entities.User", "User")
                        .WithMany("ProductRecommendations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.UserPreference", b =>
                {
                    b.HasOne("BeautyVi.Core.Entities.User", "User")
                        .WithOne("UserPreferences")
                        .HasForeignKey("BeautyVi.Core.Entities.UserPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Allergen", b =>
                {
                    b.Navigation("ProductAllergens");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.EffectType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Ingredient", b =>
                {
                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductAllergens");

                    b.Navigation("ProductIngredients");

                    b.Navigation("ProductRecommendations");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.SuitableFor", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BeautyVi.Core.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductRecommendations");

                    b.Navigation("UserPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
